makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
t = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
x <<- y
t <<- NULL
}
get = function() x
setinv = function(inverse) t <<- inverse
getinv = function() t
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## return: inverse of the original matrix input to makeCacheMatrix()
t = x$getinv()
# if the inverse has already been calculated
if (!is.null(t)){
# get it from the cache and skips the computation.
message("getting cached data")
return(t)
}
# otherwise, calculates the inverse
mat.data = x$get()
t = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(t)
return(t)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(252000)
r = rnorm(250000)
mat1 = matrix(r, nrow=500, ncol=500)
test(mat1)
# Function to compute the inverse of a matrix with caching.
# Creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
##set the matrix
##get the matrix
##set the inverse
##get the inverse
t = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
x <<- y
t <<- NULL
}
get = function() x
setinv = function(inverse) t <<- inverse
getinv = function() t
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
#########################################################################
# Calculates the inverse of an assumed square matrix, or retrieves
# a previously calculated inverse from cache, given a list argument
# from the function makeCacheMatrix().
cacheSolve <- function(x, ...) {
t = x$getinv()
# if the inverse has already been calculated
if (!is.null(t)){
# get it from the cache and skips the computation.
message("getting cached data")
return(t)
}
mat.data = x$get()
t = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(t)
return(t)
}
##############################################################################
##### Test out the functions
test = function(mat){
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
## matrix of 500 rows and 500 columns filled with normal random numbers.
set.seed(252000)
r = rnorm(250000)
mat1 = matrix(r, nrow=500, ncol=500)
test(mat1)
